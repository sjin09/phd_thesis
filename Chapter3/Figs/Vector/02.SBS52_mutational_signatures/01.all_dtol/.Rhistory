#!/usr/bin/env R
library(ggplot2)
library(pheatmap)
library(d3heatmap)
library(ggcorrplot)
library(data.table)
setwd("/Users/sl666/Github/phd_thesis/Chapter3/R/04.tol96_vs_tol52")
mat = read.table("dtol_sbs96_to_sbs52_sigs.tsv")
mat
pheatmap(mat)
mat
mat = read.table("tol96_in_sbs52_vs_tol52.tsv")
pheatmap(mat)
dev.off()
pdf("TOL_SBS96_in_SBS52_vs_TOL_SBS%2.pdf", width=10, height=10)
pheatmap(mat)
dev.off()
pdf("TOL_SBS96_in_SBS52_vs_TOL_SBS52.pdf", width=10, height=10)
pheatmap(mat)
dev.off()
#!/usr/bin/env R
## library
library(plyr)
library(ggplot2)
library(magrittr)
library(data.table)
library(randomcoloR)
library(RColorBrewer)
## setwd
setwd("/Users/sl666/Github/phd_thesis/Chapter3/Figs/02.som_germ_mutsig/01.all_dtol")
## options
options(scipen = 999)
## options
options(scipen = 999)
## import
i = fread("HDP_attribution_dtol.tsv")
j = i[mutsig!="SBS0"]
## import
i = fread("HDP_exposure_all_SBS52.tsv")
j = i[mutsig!="SBS0"]
j[]
mutsig_lst = unique(j[,mutsig])
j[,mutsig:=factor(mutsig, levels=mutsig_lst)]
sample_lst = unique(j[,sample])
sample_count = length(sample_lst)
sample_count
sig_count = length(mutsig_lst)
sig_palette = distinctColorPalette(sig_count)
## ggplot2
pdf("HDP.pdf", height=12, width=25)
for(i in seq(1,998,20)){
o = ggplot(j[sample %in% sample_lst[i:(i+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
print(o)
}
i
o = ggplot(j[sample %in% sample_lst[i:(i+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
o
o
sample_lst[i:(i+20)]
ggplot(j[sample %in% sample_lst[i:(i+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
rm(list=ls())
#!/usr/bin/env R
## library
library(plyr)
library(ggplot2)
library(magrittr)
library(data.table)
library(randomcoloR)
library(RColorBrewer)
## setwd
setwd("/Users/sl666/Github/phd_thesis/Chapter3/Figs/02.som_germ_mutsig/01.all_dtol")
## options
options(scipen = 999)
## import
i = fread("HDP_exposure_all_SBS52.tsv")
j = i[mutsig!="SBS0"]
mutsig_lst = unique(j[,mutsig])
j[,mutsig:=factor(mutsig, levels=mutsig_lst)]
sample_lst = unique(j[,sample])
sample_count = length(sample_lst)
sig_count = length(mutsig_lst)
sig_palette = distinctColorPalette(sig_count)
dev.off()
i=1
ggplot(j[sample %in% sample_lst[i:(i+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
o = ggplot(j[sample %in% sample_lst[i:(i+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
dev.ofF()
dev.off()
## ggplot2
pdf("HDP.pdf", height=12, width=25)
for(i in seq(1,998,20)){
o = ggplot(j[sample %in% sample_lst[i:(i+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
print(o)
}
gg
o
dev.off()
o
i
## import
i = fread("HDP_exposure_all_SBS52.tsv")
j = i[mutsig!="SBS0"]
j
j[,order(sample)]
j[order(sample)]
j = j[order(sample)]
mutsig_lst = unique(j[,mutsig])
j[,mutsig:=factor(mutsig, levels=mutsig_lst)]
sample_lst = unique(j[,sample])
sample_count = length(sample_lst)
sig_count = length(mutsig_lst)
sig_palette = distinctColorPalette(sig_count)
o = ggplot(j[sample %in% sample_lst[i:(i+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
i
o = ggplot(j[sample %in% sample_lst[k:(k+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
k=1
o = ggplot(j[sample %in% sample_lst[k:(k+20)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
k
o
o = ggplot(j[sample %in% sample_lst[k:(k+19)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
op
po
o
dev.off()
## ggplot2
pdf("HDP.pdf", height=12, width=25)
for(k in seq(1,998,20)){
o = ggplot(j[sample %in% sample_lst[k:(k+19)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
print(o)
}
dev.off()
print(o)
o
classo
class(o)
?ggsave
dev.off()
## ggplot2
## pdf("HDP.pdf", height=12, width=25)
for(k in seq(1,998,20)){
o = ggplot(j[sample %in% sample_lst[k:(k+19)]], aes(x=sample, y=attribution, fill=mutsig)) +
geom_bar(stat="identity", )  +
theme_bw() +
scale_fill_manual(values = sig_palette) +
theme(legend.title = element_blank()) +
labs(x = "\nSample\n", y = "\nMutational Signature Attribution\n") +
theme(axis.text.x = element_text(angle = 90, hjust = 1), text = element_text(size=12))
ggsave(filename=sprintf("%s.pdf", k), o, height=12, width=25)
}
